{"version":3,"file":"motor.js","sourceRoot":"","sources":["../../src/motor.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, TemplateResult, css, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nexport enum MotorMode {\n  idle = 'idle',\n  brake = 'brake',\n  forward = 'forward',\n  reverse = 'reverse',\n}\n\nexport interface Active {\n  mode: MotorMode.forward | MotorMode.reverse;\n  power: number;\n}\nexport interface Idle {\n  mode: MotorMode.idle;\n}\nexport interface Break {\n  mode: MotorMode.brake;\n}\n\nexport type MotorControl = Active | Idle | Break;\n\ninterface BreakTouchArea {\n  zone: MotorMode.brake;\n}\ninterface ActiveTouchArea {\n  zone: MotorMode.forward | MotorMode.reverse;\n  power: number;\n}\ninterface UnknownTouchArea {\n  zone: MotorMode.idle;\n}\ntype PowerArea = BreakTouchArea | ActiveTouchArea | UnknownTouchArea;\n\n@customElement('drive-motor')\nexport class DriveMotor extends LitElement {\n  BREAK_AREA = 0.2;\n  MAX_OUT_AREA = 0.05;\n  @property({ type: Object })\n  current: MotorControl = { mode: MotorMode.idle };\n\n  getTouchArea = (event: TouchEvent, current: MotorMode): PowerArea => {\n    const rect = (event.target as HTMLElement).getBoundingClientRect();\n    const x = event.touches[0].clientX - rect.left;\n    const y = event.touches[0].clientY - rect.top;\n    const aspectRatio = rect.width / rect.height;\n    const maxOutY = rect.height * this.MAX_OUT_AREA;\n    const maxOutX = rect.width * this.MAX_OUT_AREA;\n    const breakStartY = rect.height * (1 - this.BREAK_AREA);\n    const breakStartX = rect.width * (1 - this.BREAK_AREA);\n\n    const isInBrakeZone = x > breakStartX && y > breakStartY;\n    if (isInBrakeZone) {\n      return { zone: MotorMode.brake };\n    }\n    if (x > rect.width || x < 0 || y > rect.height || y < 0) {\n      return { zone: MotorMode.idle };\n    }\n    const powerSide =\n      x / aspectRatio < y ? MotorMode.forward : MotorMode.reverse;\n\n    if (\n      current === MotorMode.forward ||\n      (current !== MotorMode.reverse && powerSide === MotorMode.forward)\n    ) {\n      // if we're in forward mode but the touch is in the reverse zone,\n      // we honor the vertical axis of the touch and keep it forward.\n      // Equivalent behavior for reverse.\n      // For going from forward to reverse, user must go through break or idle.\n      return {\n        zone: MotorMode.forward,\n        power: Math.max(\n          0,\n          Math.min(1, (breakStartX - x) / (breakStartX - maxOutX))\n        ),\n      };\n    } else {\n      return {\n        zone: MotorMode.reverse,\n        power: Math.max(\n          0,\n          Math.min(1, (breakStartY - y) / (breakStartY - maxOutY))\n        ),\n      };\n    }\n  };\n\n  protected onTouchMove(event: TouchEvent) {\n    const mode = this.current.mode;\n    const area = this.getTouchArea(event, mode);\n    switch (mode) {\n      case MotorMode.idle:\n        if (area.zone === MotorMode.idle) {\n          break;\n        } else if (area.zone === MotorMode.brake) {\n          this.onChange({ mode: MotorMode.brake });\n        } else if (area.zone === MotorMode.forward) {\n          this.onChange({ mode: MotorMode.forward, power: area.power });\n        } else if (area.zone === MotorMode.reverse) {\n          this.onChange({ mode: MotorMode.reverse, power: area.power });\n        } else {\n          throw new Error('unknown touch area for state');\n        }\n        break;\n      case MotorMode.brake:\n        if (area.zone === MotorMode.idle) {\n          this.onChange({ mode: MotorMode.idle });\n        } else if (area.zone === MotorMode.brake) {\n          break;\n        } else if (area.zone === MotorMode.forward) {\n          this.onChange({ mode: MotorMode.forward, power: area.power });\n        } else if (area.zone === MotorMode.reverse) {\n          this.onChange({ mode: MotorMode.reverse, power: area.power });\n        } else {\n          throw new Error('unknown touch area for state');\n        }\n        break;\n\n      case MotorMode.forward:\n        if (area.zone === MotorMode.idle) {\n          this.onChange({ mode: MotorMode.idle });\n        } else if (area.zone === MotorMode.brake) {\n          this.onChange({ mode: MotorMode.brake });\n        } else if (area.zone === MotorMode.forward) {\n          this.onChange({ mode: MotorMode.forward, power: area.power });\n        } else if (area.zone === MotorMode.reverse) {\n          break;\n        } else {\n          throw new Error('unknown touch area for state');\n        }\n        break;\n      case MotorMode.reverse:\n        if (area.zone === MotorMode.idle) {\n          this.onChange({ mode: MotorMode.idle });\n        } else if (area.zone === MotorMode.brake) {\n          this.onChange({ mode: MotorMode.brake });\n        } else if (area.zone === MotorMode.forward) {\n          break;\n        } else if (area.zone === MotorMode.reverse) {\n          this.onChange({ mode: MotorMode.reverse, power: area.power });\n        } else {\n          throw new Error('unknown touch area for state');\n        }\n        break;\n      default:\n        throw new Error('unknown power mode');\n    }\n  }\n  protected onTouchEnd() {\n    this.onChange({ mode: MotorMode.idle });\n  }\n  protected onTouchStart(event: TouchEvent) {\n    this.onTouchMove(event);\n  }\n  protected onChange(control: MotorControl) {\n    this.current = control;\n    this.dispatchEvent(new CustomEvent('change'));\n  }\n\n  static styles = css`\n    :host {\n      border: 1px solid black;\n      width: 60%;\n      background-color: #fafafa;\n    }\n  `;\n  render(): TemplateResult {\n    const mode = this.current.mode;\n    const power =\n      mode === MotorMode.forward || mode === MotorMode.reverse\n        ? this.current.power\n        : 0;\n    return html`<div\n      @touchstart=${this.onTouchStart}\n      @touchend=${this.onTouchEnd}\n      @touchmove=${this.onTouchMove}\n    >\n      <div>Mode: ${mode}</div>\n      <div>Power: ${power.toFixed(2)}</div>\n    </div>`;\n  }\n}\n"]}