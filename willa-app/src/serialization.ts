// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';
/**
 * @enum {number}
 */
export namespace Willa.DriveController{
export enum MotorMode{
  Idle= 0,
  Brake= 1,
  Forward= 2,
  Reverse= 3
};
}

/**
 * @constructor
 */
export namespace Willa.DriveController{
export class DriveControl {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DriveControl
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DriveControl {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DriveControl= obj
 * @returns DriveControl
 */
static getRootAsDriveControl(bb:flatbuffers.ByteBuffer, obj?:DriveControl):DriveControl {
  return (obj || new DriveControl()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DriveControl= obj
 * @returns DriveControl
 */
static getSizePrefixedRootAsDriveControl(bb:flatbuffers.ByteBuffer, obj?:DriveControl):DriveControl {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DriveControl()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
steer():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns Willa.DriveController.MotorMode
 */
motorMode():Willa.DriveController.MotorMode {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : Willa.DriveController.MotorMode.Idle;
};

/**
 * @returns number
 */
motorPower():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
frontLights():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
rearLights():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
horn():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDriveControl(builder:flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param flatbuffers.Builder builder
 * @param number steer
 */
static addSteer(builder:flatbuffers.Builder, steer:number) {
  builder.addFieldInt16(0, steer, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Willa.DriveController.MotorMode motorMode
 */
static addMotorMode(builder:flatbuffers.Builder, motorMode:Willa.DriveController.MotorMode) {
  builder.addFieldInt8(1, motorMode, Willa.DriveController.MotorMode.Idle);
};

/**
 * @param flatbuffers.Builder builder
 * @param number motorPower
 */
static addMotorPower(builder:flatbuffers.Builder, motorPower:number) {
  builder.addFieldInt16(2, motorPower, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frontLights
 */
static addFrontLights(builder:flatbuffers.Builder, frontLights:number) {
  builder.addFieldInt16(3, frontLights, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rearLights
 */
static addRearLights(builder:flatbuffers.Builder, rearLights:number) {
  builder.addFieldInt16(4, rearLights, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number horn
 */
static addHorn(builder:flatbuffers.Builder, horn:number) {
  builder.addFieldInt16(5, horn, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDriveControl(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDriveControl(builder:flatbuffers.Builder, steer:number, motorMode:Willa.DriveController.MotorMode, motorPower:number, frontLights:number, rearLights:number, horn:number):flatbuffers.Offset {
  DriveControl.startDriveControl(builder);
  DriveControl.addSteer(builder, steer);
  DriveControl.addMotorMode(builder, motorMode);
  DriveControl.addMotorPower(builder, motorPower);
  DriveControl.addFrontLights(builder, frontLights);
  DriveControl.addRearLights(builder, rearLights);
  DriveControl.addHorn(builder, horn);
  return DriveControl.endDriveControl(builder);
}
}
}
