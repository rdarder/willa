{"version":3,"file":"socket-connector.js","sourceRoot":"","sources":["../src/socket-connector.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  LitElement,\n  ReactiveController,\n  ReactiveControllerHost,\n  TemplateResult,\n  css,\n  html,\n} from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport settings from './settings';\n\nexport enum ConnectionStatus {\n  DISCONNECTED = 'Disconnected',\n  CONNECTING = 'Connecting',\n  CONNECTED = 'Connected',\n}\n\nexport class WebSocketConnectorController implements ReactiveController {\n  host: ReactiveControllerHost;\n\n  status: ConnectionStatus = ConnectionStatus.DISCONNECTED;\n  private wantsToConnect: boolean = false;\n  private connectionAttempt?: number;\n  consecutiveErrors: number = 0;\n  websocket?: WebSocket;\n\n  constructor(host: ReactiveControllerHost) {\n    this.host = host;\n    host.addController(this);\n  }\n  hostDisconnected(): void {\n    this.disconnect();\n  }\n\n  connect(): void {\n    this.wantsToConnect = true;\n    this.onChange();\n  }\n  disconnect(): void {\n    this.wantsToConnect = false;\n    this.onChange();\n  }\n\n  private onChange() {\n    if (this.wantsToConnect) {\n      if (this.status === ConnectionStatus.DISCONNECTED) {\n        this.status = ConnectionStatus.CONNECTING;\n        this.scheduleWebSocketConnection();\n      }\n    } else {\n      if (this.status === ConnectionStatus.CONNECTING) {\n        this.status = ConnectionStatus.DISCONNECTED;\n        this.abortConnection();\n      } else if (this.status === ConnectionStatus.CONNECTED) {\n        this.status = ConnectionStatus.DISCONNECTED;\n        this.abortConnection();\n      }\n    }\n    this.host.requestUpdate();\n  }\n  private abortConnection(): void {\n    if (this.websocket) {\n      this.websocket.close();\n    }\n    if (this.connectionAttempt) {\n      window.clearTimeout(this.connectionAttempt);\n    }\n  }\n\n  private scheduleWebSocketConnection(): void {\n    // schedule a connection waiting 1 second per consecutive error, up to max 3 seconds between attempt.\n    this.connectionAttempt = window.setTimeout(() => {\n      this.connectWebSocket();\n    }, Math.min(this.consecutiveErrors * 1000, 3000));\n  }\n\n  private connectWebSocket(): void {\n    // const host = window.location.host;\n    const host = settings.getWebSocketHost();\n    const connectTimeout = window.setTimeout(() => {\n      console.log('ws timeout');\n      this.websocket?.close();\n      // onclose will account for the error.\n    }, 5000);\n    this.websocket = new WebSocket(`ws://${host}/controller`);\n    const onError = (onerror = () => {\n      console.log('ws error');\n      if (this.websocket) {\n        this.websocket.onclose = null;\n        this.websocket.close();\n      }\n      this.status = ConnectionStatus.DISCONNECTED;\n      this.consecutiveErrors++;\n      window.clearTimeout(connectTimeout);\n      this.onChange();\n    });\n    this.websocket!.onerror = onError;\n    this.websocket!.onclose = onError;\n    this.websocket!.onopen = (ev: Event) => {\n      this.status = ConnectionStatus.CONNECTED;\n      window.clearTimeout(connectTimeout);\n      this.consecutiveErrors = 0;\n      this.onChange();\n    };\n  }\n}\n\n@customElement('websocket-connector')\nexport class WebSocketConnector extends LitElement {\n  @property({ type: String })\n  status: ConnectionStatus = ConnectionStatus.DISCONNECTED;\n\n  @property({ type: Number })\n  consecutiveErrors: number = 0;\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n        flex-direction: column;\n        flex-grow: 1;\n        align-items: center;\n        justify-content: center;\n      }\n    `;\n  }\n\n  protected errorCount() {\n    if (this.consecutiveErrors > 0) {\n      return html`<div>${this.consecutiveErrors} errors</div>`;\n    }\n  }\n  protected render(): TemplateResult {\n    switch (this.status) {\n      case ConnectionStatus.CONNECTED:\n        return html`<div>Connected</div>`;\n      case ConnectionStatus.CONNECTING:\n        return html`\n          <div>Connecting...</div>\n          <div>${this.errorCount()}</div>\n          <button @click=${this.clickDisconnect}>Cancel</button>\n        `;\n      case ConnectionStatus.DISCONNECTED:\n        return html`\n          <toggle-button @touchend=${this.clickConnect} size=\"large\">\n            <icon-game></icon-game>\n          </toggle-button>\n        `;\n    }\n  }\n\n  clickConnect(): void {\n    this.dispatchEvent(new CustomEvent('connect'));\n  }\n  clickDisconnect(): void {\n    this.dispatchEvent(new CustomEvent('disconnect'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'websocket-connector': WebSocketConnector;\n  }\n}\n"]}